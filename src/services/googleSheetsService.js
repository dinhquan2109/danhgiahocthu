import { GOOGLE_SHEETS_CONFIG } from '../config.js';

class GoogleSheetsService {
  constructor() {
    this.sheetId = GOOGLE_SHEETS_CONFIG.SHEET_ID;
    this.clientId = GOOGLE_SHEETS_CONFIG.CLIENT_ID;
    this.baseUrl = 'https://sheets.googleapis.com/v4/spreadsheets';
    this.accessToken = null;
  }

  // Kh·ªüi t·∫°o Google Identity Services (GIS) m·ªõi
  async initializeGoogleAPI() {
    return new Promise((resolve, reject) => {
      console.log('üîç Checking Google Identity Services availability...');
      
      // Ki·ªÉm tra n·∫øu Google Identity Services ƒë√£ ƒë∆∞·ª£c load
      if (window.google && window.google.accounts) {
        this.authenticateWithGIS().then(resolve).catch(reject);
        return;
      }

      // ƒê·ª£i Google Identity Services load
      const checkGIS = () => {
        if (window.google && window.google.accounts) {
          console.log('‚úÖ Google Identity Services loaded');
          this.authenticateWithGIS().then(resolve).catch(reject);
        } else {
          console.log('‚è≥ Waiting for Google Identity Services...');
          setTimeout(checkGIS, 100);
        }
      };
      
      checkGIS();
    });
  }

  // X√°c th·ª±c v·ªõi Google Identity Services
  async authenticateWithGIS() {
    return new Promise((resolve, reject) => {
      try {
        console.log('üîê Initializing Google Identity Services...');
        
        // Kh·ªüi t·∫°o Google Identity Services
        window.google.accounts.id.initialize({
          client_id: this.clientId,
          callback: (response) => {
            console.log('‚úÖ Google Identity Services callback received');
            console.log('üîë JWT Token received:', response.credential ? 'Yes' : 'No');
            
            // L∆∞u JWT token
            this.accessToken = response.credential;
            resolve(true);
          }
        });

        console.log('üîë Prompting Google Sign-In...');
        // Hi·ªÉn th·ªã popup ƒëƒÉng nh·∫≠p
        window.google.accounts.id.prompt((notification) => {
          if (notification.isNotDisplayed() || notification.isSkippedMoment()) {
            console.log('‚ö†Ô∏è Google Sign-In popup was not displayed or skipped');
            reject(new Error('Google Sign-In popup was not displayed'));
          } else {
            console.log('‚úÖ Google Sign-In popup displayed');
          }
        });
      } catch (error) {
        console.error('‚ùå Error with Google Identity Services:', error);
        reject(error);
      }
    });
  }

  // L·∫•y danh s√°ch d·ªØ li·ªáu ƒë√£ c√≥
  async getExistingData() {
    try {
      if (!this.accessToken) {
        await this.initializeGoogleAPI();
      }

      console.log('üìä Fetching data from Google Sheets...');
      const range = `${GOOGLE_SHEETS_CONFIG.SHEETS.DATA}!A:K`;
      const url = `${this.baseUrl}/${this.sheetId}/values/${range}`;
      
      const response = await fetch(url, {
        headers: {
          'Authorization': `Bearer ${this.accessToken}`,
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      const rows = data.values || [];
      
      console.log(`‚úÖ Fetched ${rows.length} rows from Google Sheets`);
      
      // B·ªè qua header row (row ƒë·∫ßu ti√™n)
      const evaluations = rows.slice(1).map((row, index) => ({
        id: index + 1,
        name: row[0] || '',
        classId: row[1] || '',
        nameTeacher: row[2] || '',
        level: row[3] || '',
        status: row[4] || '',
        criteria1: row[5] || '',
        criteria2: row[6] || '',
        criteria3: row[7] || '',
        criteria4: row[8] || '',
        criteria5: row[9] || '',
        date: row[10] || ''
      }));
      
      return evaluations;
    } catch (error) {
      console.error('‚ùå Error fetching data:', error);
      throw error;
    }
  }

  // Ghi k·∫øt qu·∫£ ƒë√°nh gi√° v√†o Google Sheets
  async saveEvaluation(evaluationData) {
    try {
      if (!this.accessToken) {
        await this.initializeGoogleAPI();
      }

      console.log('üíæ Saving evaluation with Google Identity Services');
      console.log('üìä Evaluation data:', evaluationData);
      
      // Chuy·ªÉn ƒë·ªïi ratings th√†nh c√°c gi√° tr·ªã t∆∞∆°ng ·ª©ng
      const getStatusValue = (rating) => {
        const statusMap = {
          1: 'R·∫•t h·∫°n ch·∫ø',
          2: 'Y·∫øu', 
          3: 'Trung b√¨nh',
          4: 'T·ªët',
          5: 'R·∫•t t·ªët/Ti·ªÅm nƒÉng cao'
        };
        return statusMap[rating] || '';
      };

      const getCriteriaValue = (rating) => {
        const criteriaMap = {
          1: 'H·ªçc vi√™n c√≤n r·ª•t r√®, ch∆∞a t∆∞∆°ng t√°c nhi·ªÅu v·ªõi gi√°o vi√™n, c·∫ßn h·ªó tr·ª£ v√† kh∆°i g·ª£i th√™m',
          2: 'H·ªçc vi√™n c√≥ m·ªôt s·ªë t∆∞∆°ng t√°c c∆° b·∫£n nh∆∞ng c√≤n h·∫°n ch·∫ø, c·∫ßn khuy·∫øn kh√≠ch th√™m',
          3: 'H·ªçc vi√™n t∆∞∆°ng t√°c ·ªü m·ª©c trung b√¨nh, c√≥ th·ªÉ c·∫£i thi·ªán th√™m',
          4: 'H·ªçc vi√™n t∆∞∆°ng t√°c t·ªët, c√≥ s·ª± ti·∫øn b·ªô r√µ r·ªát',
          5: 'H·ªçc vi√™n t∆∞∆°ng t√°c xu·∫•t s·∫Øc, c√≥ ti·ªÅm nƒÉng cao'
        };
        return criteriaMap[rating] || '';
      };
      
      const values = [
        [
          evaluationData.studentName,                    // A: T√™n h·ªçc vi√™n
          evaluationData.classCode,                      // B: M√£ l·ªõp
          evaluationData.teacherName,                   // C: T√™n gi√°o vi√™n
          evaluationData.level,                          // D: Tr√¨nh ƒë·ªô
          getStatusValue(evaluationData.ratings.communication || evaluationData.ratings.pronunciation || 1), // E: Status
          getCriteriaValue(evaluationData.ratings.communication || 1), // F: Ti√™u ch√≠ 1
          getCriteriaValue(evaluationData.ratings.pronunciation || 1), // G: Ti√™u ch√≠ 2
          getCriteriaValue(evaluationData.ratings.vocabulary || 1),    // H: Ti√™u ch√≠ 3
          getCriteriaValue(evaluationData.ratings.listening || 1),     // I: Ti√™u ch√≠ 4
          getCriteriaValue(evaluationData.ratings.reading || 1),       // J: Ti√™u ch√≠ 5
          new Date().toISOString().split('T')[0]        // K: Ng√†y ƒë√°nh gi√°
        ]
      ];
      
      console.log('üìù Values to save:', values);

      const range = `${GOOGLE_SHEETS_CONFIG.SHEETS.DATA}!A:K`;
      const url = `${this.baseUrl}/${this.sheetId}/values/${range}:append?valueInputOption=USER_ENTERED`;
      
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.accessToken}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          values: values
        })
      });
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Save failed:', errorText);
        throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);
      }
      
      const result = await response.json();
      console.log('‚úÖ Save successful:', result);
      return result;
    } catch (error) {
      console.error('‚ùå Error saving evaluation:', error);
      throw error;
    }
  }

  // Ki·ªÉm tra k·∫øt n·ªëi Google Sheets
  async testConnection() {
    try {
      if (!this.accessToken) {
        await this.initializeGoogleAPI();
      }

      console.log('üîç Testing Google Sheets connection...');
      const range = `${GOOGLE_SHEETS_CONFIG.SHEETS.DATA}!A1`;
      const url = `${this.baseUrl}/${this.sheetId}/values/${range}`;
      
      const response = await fetch(url, {
        headers: {
          'Authorization': `Bearer ${this.accessToken}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (!response.ok) {
        console.error('‚ùå Connection failed:', response.status);
        return false;
      }
      
      console.log('‚úÖ Connection successful with Google Identity Services');
      return true;
    } catch (error) {
      console.error('‚ùå Connection test failed:', error);
      return false;
    }
  }
}

export default new GoogleSheetsService();
